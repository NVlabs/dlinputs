#!/usr/bin/python

import matplotlib
# matplotlib.use("GTK")

from pylab import *
rc("image", cmap="hot")
import pylab
import os
import imp
import glob
import numpy as np
import torch
import argparse
from dlpipes import io
from dlpipes import inputs as dli
from dlpipes import shardwriter
import time

parser = argparse.ArgumentParser("Dump the output from an input pipeline in tar shards.")
parser.add_argument("-N", "--nextract", default=1000000000, type=int)
parser.add_argument("-t", "--testset", action="store_true")
parser.add_argument("-U", "--unbatch", action="store_true")
parser.add_argument("-d", "--display", default=-1, type=int)
parser.add_argument("-c", "--converters", default="")
parser.add_argument("-n", "--names", default="")
parser.add_argument("-S", "--shardsize", default=1e9, type=float)
parser.add_argument("-k", "--filekey")
parser.add_argument("-K", "--hashkey")
parser.add_argument("input")
parser.add_argument("prefix")
args = parser.parse_args()
args.shardsize = int(args.shardsize)
args.converters = eval("dict({})".format(args.converters))

names = {}
for kv in args.names.split(","):
    k, v = kv.split("=", 1)
    names[v] = k
args.names = names
print args.names

inputs = io.load_input(args.input)

if args.testset:
    source = inputs.testing()
else:
    source = inputs.training()

if args.unbatch:
    source = dli.gen(source) | dli.itunbatch()

writer = shardwriter.ShardWriter(args.prefix,
                                 converters=args.converters,
                                 names=args.names,
                                 shardsize=args.shardsize)

for i, batch in enumerate(source):
    if i % 1000 == 0: print i
    writer.write("%09d" % i, batch)
