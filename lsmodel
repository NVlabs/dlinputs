#!/usr/bin/python
import re
import glob
import argparse
import itertools

import numpy as np
import pylab
import torch
import psutil
import torch.optim as optim
import editdistance
from pylab import *
from torch import nn
from dlinputs import paths, utils
from torch.autograd import Variable

# matplotlib.use("GTK")
pylab.rc("image", cmap="hot")

parser = argparse.ArgumentParser("""Show model training graphs.""")
parser.add_argument("-r", "--reload", type=float, default=60.0)
parser.add_argument("-x", "--linear_x", action="store_true")
parser.add_argument("-y", "--linear_y", action="store_true")
parser.add_argument("-n", "--mintrain", type=int, default=1)
parser.add_argument("-t", "--tail", type=int, default=1000000)
parser.add_argument("files", nargs="*")
args = parser.parse_args()

if args.files == []: args.files = ["*"]

while 1:
    fnames = []
    for arg in args.files:
        fnames += glob.glob(arg)
    graphs = {}
    for fname in fnames:
        match = re.search(r"^(.*)-([0-9]{6,})-([0-9]{6,}).pt", fname)
        if not match: continue
        key, ntrain, err = match.groups()
        graphs[key] = graphs.get(key, []) + [(int(ntrain)*1e3, int(err)*1e-6)]

    clf()
    if not args.linear_x: xscale('log')
    if not args.linear_y: yscale('log')
    handles = []
    for key, graph in graphs.items():
        graph = sorted(graph)
        graph = graph[-args.tail:]
        graph = [(x, y) for x, y in graph if x >= args.mintrain]
        handles += [plot(*zip(*graph), label=key)[0]]
    legend(handles=handles)
    ginput(1, args.reload)
